generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id        String          @id @default(uuid())
  name      String
  email     String          @unique
  firstName String
  letters   StudentLetter[]
  projects  Project[]       @relation("ProjectToStudent")
}

model Organisation {
  id           Int        @id @default(autoincrement())
  name         String     @unique
  jurisdiction String
  framework    Framework?
  projects     Project[]
}

model Project {
  id                   Int                 @id @default(autoincrement())
  organisationId       Int
  programmeId          Int
  title                String              @unique
  description          String
  startDate            DateTime
  endDate              DateTime
  status               ProjectStatus       @default(ACTIVE)
  location             String?
  uniSignatory         String
  uniSignatoryEmail    String
  uniSignatoryPosition String?
  uniSupervisor        String
  uniSupervisorEmail   String
  orgSignatory         String
  orgSignatoryEmail    String
  orgSignatoryPosition String?             @default("None")
  orgNotices           String?             @default("None")
  orgNoticesEmail      String?             @default("None")
  isSupervisor         String?             @default("None")
  isSupervisorEmail    String?             @default("None")
  isSupervisorPosition String?             @default("None")
  employment           String?             @default("None")
  moduleCode           String
  moduleYear           Int
  organisation         Organisation        @relation(fields: [organisationId], references: [id])
  projectDescription   ProjectDescription?
  studentLetters       StudentLetter[]
  students             Student[]           @relation("ProjectToStudent")
  programme            Programme           @relation(fields: [programmeId], references: [id])

  isArchived Boolean @default(false)
}

model Programme {
  id       Int       @id @default(autoincrement())
  code     String
  projects Project[]
}

model FrameworkTemplate {
  id         Int         @id @default(autoincrement())
  name       String
  link       String?
  docusignId String?
  isDefault  Boolean     @default(false)
  frameworks Framework[]
}

model Framework {
  id             Int            @id @default(autoincrement())
  organisationId Int            @unique
  templateId     Int
  link           String?
  status         ContractStatus @default(DRAFT)
  orgSigned      Boolean        @default(false)
  uniSigned      Boolean        @default(false)
  createdAt      DateTime?      @default(now())
  sentAt         DateTime?
  lastUpdated    DateTime       @updatedAt
  docusignId     String?        @unique

  orgSignatory         String?
  orgSignatoryEmail    String?
  orgSignatoryPosition String?

  uniSignatory         String?
  uniSignatoryEmail    String?
  uniSignatoryPosition String?

  isArchived Boolean @default(false)

  organisation Organisation      @relation(fields: [organisationId], references: [id])
  template     FrameworkTemplate @relation(fields: [templateId], references: [id])
}

model StudentLetterTemplate {
  id             Int             @id @default(autoincrement())
  name           String
  link           String?
  docusignId     String?
  isDefault      Boolean         @default(false)
  studentLetters StudentLetter[]
}

model StudentLetter {
  id            Int                   @id @default(autoincrement())
  studentId     String
  templateId    Int
  projectId     Int
  status        ContractStatus        @default(DRAFT)
  link          String?
  uniSigned     Boolean               @default(false)
  studentSigned Boolean               @default(false)
  studentReference String?
  createdAt     DateTime?
  sentAt        DateTime?
  lastUpdated   DateTime              @updatedAt
  docusignId    String?               @unique
  isArchived    Boolean               @default(false)
  project       Project               @relation(fields: [projectId], references: [id])
  student       Student               @relation(fields: [studentId], references: [id])
  template      StudentLetterTemplate @relation(fields: [templateId], references: [id])
}

model ProjectDescriptionTemplate {
  id                  Int                  @id @default(autoincrement())
  name                String
  link                String?
  docusignId          String?             
  isDefault           Boolean              @default(false)
  projectDescriptions ProjectDescription[]
}

model ProjectDescription {
  id          Int                        @id @default(autoincrement())
  projectId   Int                        @unique
  templateId  Int
  link        String?
  uniSigned   Boolean                    @default(false)
  orgSigned   Boolean                    @default(false)
  status      ContractStatus             @default(DRAFT)
  uniReference String?
  createdAt   DateTime?
  sentAt      DateTime?
  lastUpdated DateTime                   @updatedAt
  docusignId  String?                    @unique
  isArchived  Boolean                    @default(false)
  project     Project                    @relation(fields: [projectId], references: [id])
  template    ProjectDescriptionTemplate @relation(fields: [templateId], references: [id])
}

model User {
  id       String   @id
  fullName String
  email    String   @unique
  // Update default to USER when ready to deploy
  role     UserRole @default(ADMIN)
}

enum ProjectStatus {
  ACTIVE
  INACTIVE
}

enum ContractStatus {
  DRAFT
  SENT
  SIGNED
}

enum UserRole {
  ADMIN
  USER
}
